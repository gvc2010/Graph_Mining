# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rB6aDcVbo0URKVVAakpsUUZKb4YJoI9F

**ATIVIDADE SOMATIVA 2**

***Tarefa 1***
"""

import networkx as nx
import pandas as pd
import matplotlib.pyplot as plt

# Carregar os dados das arestas das temporadas
S1 = pd.read_csv("got-s1-edges.csv", delimiter=",")
Grafo_Temporada1 = nx.from_pandas_edgelist(S1, source='Source', target='Target', edge_attr='Weight')

S8 = pd.read_csv("got-s8-edges.csv", delimiter=",")
Grafo_Temporada2 = nx.from_pandas_edgelist(S8, source='Source', target='Target', edge_attr='Weight')

graus_temporada1 = [val for (node, val) in Grafo_Temporada1.degree()]
graus_temporada8 = [val for (node, val) in Grafo_Temporada2.degree()]

grau_medio_temporada1 = sum(graus_temporada1) / len(graus_temporada1)
grau_medio_temporada8 = sum(graus_temporada8) / len(graus_temporada8)

densidade_temporada1 = nx.density(Grafo_Temporada1)
densidade_temporada8 = nx.density(Grafo_Temporada2)

transitividade_temporada1 = nx.transitivity(Grafo_Temporada1)
transitividade_temporada8 = nx.transitivity(Grafo_Temporada2)

# Tarefa 1 - Análise das redes das temporadas
print("Análise das Redes ocorrência de Personagens em Game of Thrones")

# Distribuição de graus dos vértices
print("\nDistribuição de Graus:")
plt.hist(graus_temporada1, bins=20, color='blue', alpha=0.7)
plt.title('Temporada 1')
plt.xlabel('Grau')
plt.ylabel('Número de Personagens')
plt.show()

plt.hist(graus_temporada8, bins=20, color='red', alpha=0.7)
plt.title('Temporada 8')
plt.xlabel('Grau')
plt.ylabel('Número de Personagens')
plt.show()

# Grau Médio
print("\nGrau Médio:")
print("Temporada 1:", grau_medio_temporada1)
print("Temporada 8:", grau_medio_temporada8)

# Densidade
print("\nDensidade:")
print("Temporada 1:", densidade_temporada1)
print("Temporada 8:", densidade_temporada8)

# Transitividade
print("\nTransitividade:")
print("Temporada 1:", transitividade_temporada1)
print("Temporada 8:", transitividade_temporada8)

"""***TAREFA 2***"""

# Tarefa 2
# Medidas de centralidade para a temporada 1
central_grau_temporada1 = nx.degree_centrality(Grafo_Temporada1)
central_intermediacao_temporada1 = nx.betweenness_centrality(Grafo_Temporada1)
central_proximidade_temporada1 = nx.closeness_centrality(Grafo_Temporada1)
central_autovetor_temporada1 = nx.eigenvector_centrality(Grafo_Temporada1)

# Medidas de centralidade para temporada 8
central_grau_temporada8 = nx.degree_centrality(Grafo_Temporada2)
central_intermediacao_temporada8 = nx.betweenness_centrality(Grafo_Temporada2)
central_proximidade_temporada8 = nx.closeness_centrality(Grafo_Temporada2)
central_autovetor_temporada8 = nx.eigenvector_centrality(Grafo_Temporada2)

# Identifica os 3 personagens mais centrais de cada temporada para cada medida de centralidade
def top_n_centrais(central, n):
    return sorted(central.items(), key=lambda x: x[1], reverse=True)[:n]

# Tarefa 2 - Atualizado
# Temporada 1
print("Temporada 1:")
print("Centralidade de Grau:")
print("1. Personagem mais central:", top_n_centrais(central_grau_temporada1, 1)[0][0], "com grau", top_n_centrais(central_grau_temporada1, 1)[0][1])
print("2. Segundo personagem mais central:", top_n_centrais(central_grau_temporada1, 2)[1][0], "com grau", top_n_centrais(central_grau_temporada1, 2)[1][1])
print("3. Terceiro personagem mais central:", top_n_centrais(central_grau_temporada1, 3)[2][0], "com grau", top_n_centrais(central_grau_temporada1, 3)[2][1])
print("Centralidade de Intermediação:")
print("1. Personagem mais central:", top_n_centrais(central_intermediacao_temporada1, 1)[0][0], "com valor de intermediação", top_n_centrais(central_intermediacao_temporada1, 1)[0][1])
print("2. Segundo personagem mais central:", top_n_centrais(central_intermediacao_temporada1, 2)[1][0], "com valor de intermediação", top_n_centrais(central_intermediacao_temporada1, 2)[1][1])
print("3. Terceiro personagem mais central:", top_n_centrais(central_intermediacao_temporada1, 3)[2][0], "com valor de intermediação", top_n_centrais(central_intermediacao_temporada1, 3)[2][1])
print("Centralidade de Proximidade:")
print("1. Personagem mais central:", top_n_centrais(central_proximidade_temporada1, 1)[0][0], "com valor de proximidade", top_n_centrais(central_proximidade_temporada1, 1)[0][1])
print("2. Segundo personagem mais central:", top_n_centrais(central_proximidade_temporada1, 2)[1][0], "com valor de proximidade", top_n_centrais(central_proximidade_temporada1, 2)[1][1])
print("3. Terceiro personagem mais central:", top_n_centrais(central_proximidade_temporada1, 3)[2][0], "com valor de proximidade", top_n_centrais(central_proximidade_temporada1, 3)[2][1])
print("Centralidade de Autovetor:")
print("1. Personagem mais central:", top_n_centrais(central_autovetor_temporada1, 1)[0][0], "com valor de autovetor", top_n_centrais(central_autovetor_temporada1, 1)[0][1])
print("2. Segundo personagem mais central:", top_n_centrais(central_autovetor_temporada1, 2)[1][0], "com valor de autovetor", top_n_centrais(central_autovetor_temporada1, 2)[1][1])
print("3. Terceiro personagem mais central:", top_n_centrais(central_autovetor_temporada1, 3)[2][0], "com valor de autovetor", top_n_centrais(central_autovetor_temporada1, 3)[2][1])

# Temporada 8
print("Temporada 8:")
print("Centralidade de Grau:")
print("1. Personagem mais central:", top_n_centrais(central_grau_temporada8, 1)[0][0], "com grau", top_n_centrais(central_grau_temporada8, 1)[0][1])
print("2. Segundo personagem mais central:", top_n_centrais(central_grau_temporada8, 2)[1][0], "com grau", top_n_centrais(central_grau_temporada8, 2)[1][1])
print("3. Terceiro personagem mais central:", top_n_centrais(central_grau_temporada8, 3)[2][0], "com grau", top_n_centrais(central_grau_temporada8, 3)[2][1])
print("Centralidade de Intermediação:")
print("1. Personagem mais central:", top_n_centrais(central_intermediacao_temporada8, 1)[0][0], "com valor de intermediação", top_n_centrais(central_intermediacao_temporada8, 1)[0][1])
print("2. Segundo personagem mais central:", top_n_centrais(central_intermediacao_temporada8, 2)[1][0], "com valor de intermediação", top_n_centrais(central_intermediacao_temporada8, 2)[1][1])
print("3. Terceiro personagem mais central:", top_n_centrais(central_intermediacao_temporada8, 3)[2][0], "com valor de intermediação", top_n_centrais(central_intermediacao_temporada8, 3)[2][1])
print("Centralidade de Proximidade:")
print("1. Personagem mais central:", top_n_centrais(central_proximidade_temporada8, 1)[0][0], "com valor de proximidade", top_n_centrais(central_proximidade_temporada8, 1)[0][1])
print("2. Segundo personagem mais central:", top_n_centrais(central_proximidade_temporada8, 2)[1][0], "com valor de proximidade", top_n_centrais(central_proximidade_temporada8, 2)[1][1])
print("3. Terceiro personagem mais central:", top_n_centrais(central_proximidade_temporada8, 3)[2][0], "com valor de proximidade", top_n_centrais(central_proximidade_temporada8, 3)[2][1])
print("Centralidade de Autovetor:")
print("1. Personagem mais central:", top_n_centrais(central_autovetor_temporada8, 1)[0][0], "com valor de autovetor", top_n_centrais(central_autovetor_temporada8, 1)[0][1])
print("2. Segundo personagem mais central")

"""***TAREFA 3***"""

# Tarefa 3 - Atualizado
# Executar o algoritmo de detecção de comunidades (utilizarei Louvain) nas redes das duas temporadas
import networkx.algorithms.community as nx_comm

# Temporada 1
comunidades_temporada1 = list(nx_comm.greedy_modularity_communities(Grafo_Temporada1))
num_comunidades_temporada1 = len(comunidades_temporada1)
print("Para a Temporada 1, identificamos", num_comunidades_temporada1, "comunidades.")

# Temporada 8
comunidades_temporada8 = list(nx_comm.greedy_modularity_communities(Grafo_Temporada2))
num_comunidades_temporada8 = len(comunidades_temporada8)
print("Para a Temporada 8, identificamos", num_comunidades_temporada8, "comunidades.")

# Plotar o grafo com os vértices coloridos de acordo com as comunidades encontradas
def plot_comunidades(grafo, comunidades, temporada):
    pos = nx.spring_layout(grafo)
    cores = [0] * len(grafo.nodes)
    for i, comunidade in enumerate(comunidades):
        for node in comunidade:
            cores[list(grafo.nodes).index(node)] = i
    nx.draw(grafo, pos, node_color=cores, cmap=plt.cm.get_cmap('viridis'), with_labels=True)
    plt.title('Comunidades - Temporada ' + str(temporada))
    plt.show()

plot_comunidades(Grafo_Temporada1, comunidades_temporada1, 1)
plot_comunidades(Grafo_Temporada2, comunidades_temporada8, 8)